#!/usr/bin/perl 
#
# dh_make - Script to prepare Debian packaging for an original source archive
#
use Getopt::Long;
use File::Basename;
use Cwd;
use strict;

#Getopt::Long::Configure ("bundling");  
#Getopt::Long::Configure ("bundling_override");  
Getopt::Long::Configure ("no_ignore_case");  

# Turns off autoabbrev to avoid mistakes with cdbs and copyright options.
$Getopt::Long::autoabbrev = 0;

# Some important parameters
our $DHLIB="/home/evvers/packages/dh-make/lib";
our $POLICY_VERSION="3.9.4";
our $DH_MAKE_VERSION="0.62";
my %PACKAGE_CLASSES = (
	'd' => 'daemon-mode config',
	'c' => 'cron-mode config',
);

our $DASHLINE="";

our $license="";
our $username="";
our $package_name="";
our $version="";
our $fullname = "";
our $package_class="";
our $forced_package_name="";
our $assume_yes = 0;
our @filenames;
our $filename;
our ($email, $date);

sub process_file(@)
{
	my ($infile, $outfile) = @_;  
	my $line;

	open IN, "<$infile" or die "Unable to open template file $infile for reading: $! \n";
	open OUT, ">$outfile" or die "Unable to open file $outfile for writing: $! \n";
	while (defined($line = <IN>))
	{
		$line =~ s/#PACKAGE#/$main::package_name/g;
		$line =~ s/#VERSION#/$main::version/g;
		$line =~ s/#EMAIL#/$main::email/g;
		$line =~ s/#DATE#/$main::date/g;
		$line =~ s/#YEAR#/$main::year/g;
		$line =~ s/#CHANGELOGS#/$main::CHANGELOG/g;
		$line =~ s/#CONFIG_STATUS#/$main::CONFIG_STATUS/g;
		$line =~ s/#CONFIGURE#/$main::CONFIGURE/g;
		$line =~ s/#CONFIGURE_STAMP#/$main::CONFIGURE_STAMP/g;
		$line =~ s/#DPKG_ARCH#/$main::DPKG_ARCH/g;
		$line =~ s/#INSTALL#/$main::INSTALL/g;
		$line =~ s/#MAKE#/$main::MAKE/g;
		$line =~ s/#CLEAN#/$main::CLEAN/g;
		$line =~ s/#USERNAME#/$main::username/g;
		$line =~ s/#POLICY#/$main::POLICY_VERSION/g;
		$line =~ s/#DASHLINE#/$main::DASHLINE/g;
		$line =~ s/#PHONY_CONFIGURE#/$main::PHONY_CONFIGURE/g;
		$line =~ s/#CDBS_CLASS#/$main::CDBS_CLASS/g;
		$line =~ s/#PATCH_CLASS#/$main::PATCH_CLASS/g;
		$line =~ s/#PATCH_CLEAN#/$main::PATCH_CLEAN/g;
		$line =~ s/#PATCH_STAMP#/$main::PATCH_STAMP/g;
		$line =~ s/#BUILD_DEPS#/$main::BUILD_DEPS/g;
		$line =~ s/#DH7_ADDON#/$main::DH7_ADDON/g;
		print OUT $line;
	}
	close IN;
	close OUT;
}

sub output_source_format
{
	my $outfile = "source/format";

	if ( ! -d 'source' )
	{
		mkdir 'source', 0755 or die "Unable to make debian/source subdirectory: $! \n";
	}

	open OUT, ">$outfile" or die "Unable to open file $outfile for writing: $! \n";
	print OUT "3.0 (native)\n";
	close OUT;
}


sub show_version
{
	print "dh_make - prepare Debian packaging for an original source archive, version $main::DH_MAKE_VERSION\n\n";
}

sub show_help
{
	show_version();
	print <<EOF
  Usage: dh_make [options]
  -c, --copyright <type>    use <type> of license in copyright file
                            (apache|artistic|bsd|gpl|gpl2|gpl3|lgpl|lgpl2|
                             lgpl3|mit)
  -C, --packageclass <cls>  set package class (d|c)
  -e, --email <address>     use <address> as the maintainer e-mail address
  -p, --packagename <name>  force package name to be <name>
  -y, --yes					Automatic yes to prompts and run non-interactively
  -h, --help                display this help screen and exit
  -v, --version             show the version and exit

EOF
}

sub parse_args
{
	my ($dohelp,$doversion, $daemon, $cron, $single,$indep,$multi,$library,$kmod,$kpatch);
	if (GetOptions(
			'copyright|c=s' => \$main::license,
		    'packageclass|C=s' => \$main::package_class,
			'email|e=s' => \$main::email,
			'help|h' => \$dohelp,
			'version|v' => \$doversion,
			'packagename|p=s' => \$main::forced_package_name,
			'yes|y' => \$main::assume_yes
		) == 0)
	{
		show_help();
		exit;
	}
	# Check for extra options, should be none!
	if ($#ARGV != -1) 
	{
		print "Extra parameters on command line\n";
		show_help();
		exit;
  	}
	if ($doversion)
	{
		show_version();
		exit;
	}
	if ($dohelp)
	{
		show_help();
		exit;
	}
	if ($daemon)
	{
		$main::package_class = 'd';
	}
	if ($cron)
	{
		$main::package_class = 'c';
	}
	$main::license = lc $main::license;
	if ($main::license ne "" && !($main::license =~ /^(gpl|gpl2|gpl3|lgpl|lgpl2|lgpl3|artistic|bsd|blank|apache|mit)$/))
	{ 
		print "Copyright type \"$main::license\" is not gpl, gpl2, gpl3, lgpl, lgpl2, lgpl3, apache, artistic, bsd, blank or mit.\n";
		exit;
	}
	# Change the non-versioned into the latest version
	$main::license = "gpl3" if ($main::license eq "gpl");
	$main::license = "lgpl3" if ($main::license eq "lgpl");
}

sub get_logname
{
	# lightdm in Ubuntu 11.10 does not set LOGNAME
	# (https://bugs.launchpad.net/bugs/875705).  Work around this by trying
	# USER instead.
	if (exists $ENV{LOGNAME})
	{
		return $ENV{LOGNAME};
	} elsif (exists $ENV{USER}) {
		return $ENV{USER};
	} else {
		die "Cannot get username; neither LOGNAME nor USER is set in the environment!\n";
	}
}

sub get_username
{
	my $tmpusername = '';

	if (exists($ENV{'DEBFULLNAME'})) 
	{
		$tmpusername = $ENV{'DEBFULLNAME'};
	}
	return $tmpusername if ($tmpusername ne "");

	my $logname = get_logname();
	if (-x '/usr/bin/getent')
	{
		$tmpusername = qx(/usr/bin/getent passwd $logname|awk -F: '\{ print \$5; \}' | cut -f1 -d,);
	}
	chomp($tmpusername);
	return $tmpusername if ($tmpusername ne "");

	$tmpusername = qx(awk -F: -vUSER=$logname '\$1 == USER \{ print \$5; \}' /etc/passwd | cut -f1 -d,);
	chomp($tmpusername);
	return $tmpusername if ($tmpusername ne "");
	
	if (-x '/usr/bin/ypmatch')
	{
		$tmpusername = qx(ypmatch $logname passwd.byname|awk -F: '\{ print \$5; \}' | cut -f1 -d,);
	}
	chomp($tmpusername);
	return $tmpusername if ($tmpusername ne "");

	if (-x '/usr/bin/ldapsearch')
	{
		$tmpusername = [map {/^(?:gecos|cn): (.*)/} qx(ldapsearch -Q -LLL uid=$logname gecos cn)]->[0];
	}
	chomp($tmpusername);
	return $tmpusername if ($tmpusername ne "");

	return "unknown";
}

sub get_email() 
{
	return $ENV{DEBEMAIL} if ($ENV{DEBEMAIL} );
	return $ENV{EMAIL} if ($ENV{EMAIL} );
	my $logname = get_logname();
	if (-x '/usr/bin/ldapsearch')
	{
		my $mail;
		$mail = [map {/^mail: (.*)/ && $1} qx(ldapsearch -Q -LLL uid=$logname mail)]->[0];
		return $mail if $mail;
	}
	if ($logname )
	{
		my $mailhost;
		if ( -e '/etc/mailname')
		{
			$mailhost = qx(cat /etc/mailname);
			chomp($mailhost);
	 	} else {
			$mailhost='unknown';
	 	} 
	 	return  ($logname . '@' . $mailhost);
	}
}

sub get_package
{
	my $pwd = $ENV{PWD};
	my $forced_package_version = "";
	# May split the version out of the name
	if ( ($main::forced_package_name) &&
		($main::forced_package_name =~ /(.*)_([0-9][0-9a-zA-Z+.~-]*)$/))
   	{
		$main::forced_package_name = $1;
		$forced_package_version = $2;
	}
	if ( ($forced_package_version ne "")
	   	|| (
			($main::forced_package_name) && 
			($pwd =~ /.*\/($main::forced_package_name)-([0-9][0-9a-zA-Z+.~-]*)$/)
		) || (
			($pwd =~ /.*\/(.*)-([0-9][0-9a-zA-Z+.~-]*)$/)
		))
	{
		if ($main::forced_package_name)
	   	{
			$main::package_name = $main::forced_package_name;
			
		} else {
			$main::package_name = $1;
		}
		if ($forced_package_version)
	   	{
			$main::fullname = $1 . "-"  . $forced_package_version;
	  		$main::version = $forced_package_version;
		} else {
	  		# Fullname stays as the original dir
			$main::fullname = $1 . "-"  . $2;
			$main::version = $2;
		}
	} else {
		print <<"EOF";
For dh_make to find the package name and version, the current directory 
needs to be in the format of <package>-<version>.  Alternatively use the
-p flag using the format <name>_<version> to override it.
I cannot understand the directory name or you have an invalid directory name!

Your current directory is $pwd, perhaps you could try going to
directory where the sources are?

Please note that this change is necessary ONLY during the initial
Debianization with dh_make.  When building the package, dpkg-source
will gracefully handle almost any upstream tarball.

EOF
	 exit 1;
	}
	if (! ($main::package_name =~ /^[a-z0-9+.-]+$/))
   	{
		print <<"EOF";
Package name "$main::package_name" is not in a valid format.
Debian policy manual states:
	"Package names must only consist of lower case letters, digits (0-9),
	plus (+) or minus (-) signs, and periods (.)"
EOF
		exit 1;
	}
	if ( ($main::package_name =~ /^[a-z0-9+.-]$/))
	{
		print <<"EOF";
Package name "$main::package_name" is not in a valid format.
You cannot create single-letter package names.
EOF
		exit 1;
	}
}

sub get_date
{
	my $tmpdate;
	if (-x "/bin/date")
	{
		$tmpdate = qx(/bin/date -R);
		chomp($tmpdate);
		return $tmpdate;
	} else {
		die "Unable to find date program in /bin!\n";
	}
}

sub print_confirmation
{
	# Print what we have found
	print "Maintainer name  : $username\n";
	print "Email-Address    : $email \n";
	print "Date             : $date\n";
	print "Package Name     : $package_name\n";
	print "Version          : $version\n";
	print "License          : $license";
	print 'blank' if $license eq '';
	print "\n";
	print "Type of Package  : ";
	if (exists $PACKAGE_CLASSES{$package_class})
	{
		print $PACKAGE_CLASSES{$package_class};
	} else {
		die "Unknown type of config\n";
	}
	if ($assume_yes == 0 )
	{
		print "\nHit <enter> to confirm: ";
		my $dummy = <STDIN>;
	} else {
		print "\n";
	}
}

# BEGIN
$username = get_username();
$email = get_email();
$date = get_date();
our $year = qx(LC_ALL=C date '+%Y');
chomp $year;
parse_args();
get_package();

# Generate a line of dashes, which is as long as '#PACKAGE# for Debian'.
for (my $i=0; $i<length("$main::package_name for Debian"); $i++)
{
	$DASHLINE = $DASHLINE . '-';
}

while ($package_class eq "")
{
	print "\nType of package: daemon-config, cron-config?\n [d/c] ";
	my $type = <STDIN>;
	chomp($type);
	print "\n";
	$type = lc($type);
	$main::package_class = 'd' if $type eq 'd';
	$main::package_class = 'c' if $type eq 'c';
}

if ($main::license eq '')
{
	$main::license = 'gpl3';
}

print_confirmation;

our ($CONFIG_STATUS, $CONFIGURE_STAMP, $PHONY_CONFIGURE, $CONFIGURE, $DPKG_ARCH, $INSTALL, $CLEAN, $MAKE, $CDBS_CLASS );
our $BUILD_DEPS = 'debhelper (>= 8.0.0)';
our $DH7_ADDON = '';

our ($PATCH_CLASS,$PATCH_STAMP,$PATCH_CLEAN);

# Setup debian/rules
$CDBS_CLASS="include /usr/share/cdbs/1/class/makefile.mk";
$CONFIGURE_STAMP='configure-stamp';
$CONFIG_STATUS='';
$CONFIGURE="configure: configure-stamp\n".
			 "configure-stamp:\n". 
		 "\tdh_testdir\n".
		 "\t# Add here commands to configure the package.\n\n".
		 "\ttouch configure-stamp\n";
$PHONY_CONFIGURE='configure';
$MAKE="\$(MAKE)";
$DPKG_ARCH='';
if ($package_class eq "l") {
 $INSTALL="\$(MAKE) DESTDIR=\$(CURDIR)/debian/tmp install";
} else {
 $INSTALL="\$(MAKE) DESTDIR=\$(CURDIR)/debian/$package_name install";
}
$CLEAN='$(MAKE) clean';

# Customize files
if ( ! -d 'debian')
{
	mkdir 'debian', 0755 or die "Unable to make debian subdirectory: $! \n";
} else {
	print "You already have a debian/ subdirectory in the source tree.\n";
	print "dh_make will not try to overwrite anything.\n";
	exit 1;
}
chdir 'debian' or die "Unable to chdir to debian subdirectory: $! \n";

if ( ! -d $DHLIB )
{
	die "Unable to find dh_make's template directory: $! \n";
}

# Source format
output_source_format();

# General Files
@filenames= split / |\n/, qx{(cd $DHLIB/debian && ls)};
foreach $filename (@filenames)
{
	process_file("$DHLIB/debian/$filename", $filename);
}

# Copyright file
if ($license eq '') 
{
	process_file("$DHLIB/licenses/blank", "copyright");
} else {
	if ( -r "$DHLIB/licenses/$license" )
	{
		process_file("$DHLIB/licenses/$license", "copyright");
	} else {
		die "Unable to find copyright template file $DHLIB/licenses/$license";
	}
}

# Special Files
@filenames = split / |\n/, qx{(cd $DHLIB/debian$package_class && ls)};
foreach $filename (@filenames)
{
	process_file("$DHLIB/debian$package_class/$filename", $filename);
}

@filenames = split / |\n/, qx(ls package* 2>/dev/null);
if ($#filenames != -1)
{
	foreach $filename (@filenames)
	{
		my $oldname = $filename;
	 	$filename =~ s/^package/$package_name/;
	 	if ( -f $filename)
	 	{
			print "File $filename already exists, skipping.\n";
	 	} else {
			system('mv', $oldname, $filename);
	 	}
	}
}
chmod 0755, 'rules';

print "Done. Please edit the files in the debian/ subdirectory now.\n";

exit 0;
# vim:noet:sw=4:ts=4
